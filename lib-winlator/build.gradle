apply plugin: 'com.android.library'
apply plugin: 'com.kezong.fat-aar'

android {
    namespace 'com.example.lib_winlator'
    compileSdk 30

    defaultConfig {
        minSdk 26
        targetSdkVersion 30
        versionCode 16
        versionName "7.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
            debuggable true
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Debug"
                }
            }
            packagingOptions {
                doNotStrip "**/*.so"
            }
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    ndkVersion '22.1.7171670'

    externalNativeBuild {
        cmake {
            version '3.22.1'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
}
fataar {
    /**
     * If transitive is true, local jar module and remote library's dependencies will be embed.
     * If transitive is false, just embed first level dependency
     * Local aar project does not support transitive, always embed first level
     * Default value is false
     * @since 1.3.0
     */
    transitive = true
}

dependencies {
//    implementation 'androidx.appcompat:appcompat:1.2.0'
//    implementation 'com.github.luben:zstd-jni:1.5.2-3@aar'
    embed 'com.github.luben:zstd-jni:1.5.2-3@aar'
    embed 'org.tukaani:xz:1.7@jar'
    embed 'org.apache.commons:commons-compress:1.20@jar'
}

def isBundleAar = gradle.startParameter.taskNames.any { it.contains("bundleReleaseAar") || it.contains("bundleDebugAar") }
def isRelease = gradle.startParameter.taskNames.any { it.contains("bundleReleaseAar") }

afterEvaluate {
    tasks.findByName("bundleReleaseAar").group = "4399"
    tasks.findByName("bundleDebugAar").group = "4399"

    if (isBundleAar){
        def bundleDebugAar = tasks.findByName("bundleDebugAar")
        bundleDebugAar.finalizedBy fatAar
        def bundleReleaseAar = tasks.findByName("bundleReleaseAar")
        bundleReleaseAar.finalizedBy fatAar
    }

}


task fatAar {
    doLast {
        def buildType
        if (isRelease) {
            buildType = "release"
        } else {
            buildType = "debug"
        }

        def aarFile = file("$buildDir/outputs/aar/${project.name}-${buildType}.aar")
        def tempDir = file("$buildDir/tmp/fat-aar")
        def explodedDir = file("$tempDir/exploded-aar")
        def classesTmpDir = file("$tempDir/classesTmp")
        def newClassesJar = file("$tempDir/classes.jar")
        def outputAar = file("$buildDir/outputs/aar/${project.name}-fat-${buildType}.aar")

        println "fat-aar 打包中..."

        delete tempDir
        tempDir.mkdirs()
        explodedDir.mkdirs()
        classesTmpDir.mkdirs()

        copy {
            from zipTree(aarFile)
            into explodedDir
        }

        fileTree(dir: "$explodedDir/libs", include: "*.jar").each { jar ->
            copy {
                from zipTree(jar)
                into classesTmpDir
            }
        }

        copy {
            from zipTree(file("$explodedDir/classes.jar"))
            into classesTmpDir
        }

        file("$explodedDir/classes.jar").delete()
        delete fileTree(dir: explodedDir, include: "libs/**")

        ant.jar(destfile: newClassesJar) {
            fileset(dir: classesTmpDir)
        }

        copy {
            from newClassesJar
            into explodedDir
        }

        // 打包 AAR
        ant.zip(destfile: outputAar) {
            fileset(dir: explodedDir)
        }

        println "fat-aar 打包完成：$outputAar"

        file("${rootDir}/myapplication/libs").listFiles()?.findAll { it.name.endsWith(".aar") }*.delete()
        copy {
            from outputAar
            into "${rootDir}/myapplication/libs"
        }

    }
}
